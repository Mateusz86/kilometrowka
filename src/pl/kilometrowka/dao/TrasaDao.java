package pl.kilometrowka.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pl.kilometrowka.dao.Trasa;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRASA.
*/
public class TrasaDao extends AbstractDao<Trasa, Long> {

    public static final String TABLENAME = "TRASA";

    /**
     * Properties of entity Trasa.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Miasta = new Property(1, String.class, "miasta", false, "MIASTA");
        public final static Property Km = new Property(2, Integer.class, "km", false, "KM");
        public final static Property Kierowca = new Property(3, Boolean.class, "kierowca", false, "KIEROWCA");
        public final static Property AutoSluzbowe = new Property(4, Boolean.class, "autoSluzbowe", false, "AUTO_SLUZBOWE");
        public final static Property CzyZPasazerem = new Property(5, Boolean.class, "czyZPasazerem", false, "CZY_ZPASAZEREM");
        public final static Property Data = new Property(6, java.util.Date.class, "data", false, "DATA");
    };


    public TrasaDao(DaoConfig config) {
        super(config);
    }
    
    public TrasaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRASA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MIASTA' TEXT," + // 1: miasta
                "'KM' INTEGER," + // 2: km
                "'KIEROWCA' INTEGER," + // 3: kierowca
                "'AUTO_SLUZBOWE' INTEGER," + // 4: autoSluzbowe
                "'CZY_ZPASAZEREM' INTEGER," + // 5: czyZPasazerem
                "'DATA' INTEGER);"); // 6: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRASA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Trasa entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String miasta = entity.getMiasta();
        if (miasta != null) {
            stmt.bindString(2, miasta);
        }
 
        Integer km = entity.getKm();
        if (km != null) {
            stmt.bindLong(3, km);
        }
 
        Boolean kierowca = entity.getKierowca();
        if (kierowca != null) {
            stmt.bindLong(4, kierowca ? 1l: 0l);
        }
 
        Boolean autoSluzbowe = entity.getAutoSluzbowe();
        if (autoSluzbowe != null) {
            stmt.bindLong(5, autoSluzbowe ? 1l: 0l);
        }
 
        Boolean czyZPasazerem = entity.getCzyZPasazerem();
        if (czyZPasazerem != null) {
            stmt.bindLong(6, czyZPasazerem ? 1l: 0l);
        }
 
        java.util.Date data = entity.getData();
        if (data != null) {
            stmt.bindLong(7, data.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Trasa readEntity(Cursor cursor, int offset) {
        Trasa entity = new Trasa( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // miasta
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // km
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // kierowca
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // autoSluzbowe
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // czyZPasazerem
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // data
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Trasa entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMiasta(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKm(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setKierowca(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setAutoSluzbowe(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCzyZPasazerem(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setData(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Trasa entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Trasa entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
